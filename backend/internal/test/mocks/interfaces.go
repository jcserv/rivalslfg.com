// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/interfaces.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=internal/services/interfaces.go -destination=internal/test/mocks/interfaces.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	repository "github.com/jcserv/rivalslfg/internal/repository"
	services "github.com/jcserv/rivalslfg/internal/services"
	gomock "go.uber.org/mock/gomock"
)

// MockIAuth is a mock of IAuth interface.
type MockIAuth struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthMockRecorder
	isgomock struct{}
}

// MockIAuthMockRecorder is the mock recorder for MockIAuth.
type MockIAuthMockRecorder struct {
	mock *MockIAuth
}

// NewMockIAuth creates a new mock instance.
func NewMockIAuth(ctrl *gomock.Controller) *MockIAuth {
	mock := &MockIAuth{ctrl: ctrl}
	mock.recorder = &MockIAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuth) EXPECT() *MockIAuthMockRecorder {
	return m.recorder
}

// CreateAuth mocks base method.
func (m *MockIAuth) CreateAuth(ctx context.Context, playerID string) (services.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuth", ctx, playerID)
	ret0, _ := ret[0].(services.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuth indicates an expected call of CreateAuth.
func (mr *MockIAuthMockRecorder) CreateAuth(ctx, playerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuth", reflect.TypeOf((*MockIAuth)(nil).CreateAuth), ctx, playerID)
}

// ValidateToken mocks base method.
func (m *MockIAuth) ValidateToken(ctx context.Context, token services.Token) (*services.PlayerAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", ctx, token)
	ret0, _ := ret[0].(*services.PlayerAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockIAuthMockRecorder) ValidateToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockIAuth)(nil).ValidateToken), ctx, token)
}

// MockIGroup is a mock of IGroup interface.
type MockIGroup struct {
	ctrl     *gomock.Controller
	recorder *MockIGroupMockRecorder
	isgomock struct{}
}

// MockIGroupMockRecorder is the mock recorder for MockIGroup.
type MockIGroupMockRecorder struct {
	mock *MockIGroup
}

// NewMockIGroup creates a new mock instance.
func NewMockIGroup(ctrl *gomock.Controller) *MockIGroup {
	mock := &MockIGroup{ctrl: ctrl}
	mock.recorder = &MockIGroupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGroup) EXPECT() *MockIGroupMockRecorder {
	return m.recorder
}

// CreateGroup mocks base method.
func (m *MockIGroup) CreateGroup(ctx context.Context, arg repository.CreateGroupParams) (repository.CreateGroupRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", ctx, arg)
	ret0, _ := ret[0].(repository.CreateGroupRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockIGroupMockRecorder) CreateGroup(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockIGroup)(nil).CreateGroup), ctx, arg)
}

// GetGroupByID mocks base method.
func (m *MockIGroup) GetGroupByID(ctx context.Context, id string) (*repository.GroupWithPlayers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupByID", ctx, id)
	ret0, _ := ret[0].(*repository.GroupWithPlayers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupByID indicates an expected call of GetGroupByID.
func (mr *MockIGroupMockRecorder) GetGroupByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupByID", reflect.TypeOf((*MockIGroup)(nil).GetGroupByID), ctx, id)
}

// GetGroups mocks base method.
func (m *MockIGroup) GetGroups(ctx context.Context, arg repository.GetGroupsParams) ([]repository.GroupWithPlayers, int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", ctx, arg)
	ret0, _ := ret[0].([]repository.GroupWithPlayers)
	ret1, _ := ret[1].(int32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockIGroupMockRecorder) GetGroups(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockIGroup)(nil).GetGroups), ctx, arg)
}

// JoinGroup mocks base method.
func (m *MockIGroup) JoinGroup(ctx context.Context, arg repository.JoinGroupParams) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinGroup", ctx, arg)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinGroup indicates an expected call of JoinGroup.
func (mr *MockIGroupMockRecorder) JoinGroup(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinGroup", reflect.TypeOf((*MockIGroup)(nil).JoinGroup), ctx, arg)
}
