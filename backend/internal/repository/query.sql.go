// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package repository

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const findAllGroups = `-- name: FindAllGroups :many
SELECT id, community_id, owner, region, gamemode, open, passcode, vanguards, duelists, strategists, platforms, voice_chat, mic, created_at, updated_at FROM Groups
`

func (q *Queries) FindAllGroups(ctx context.Context) ([]Group, error) {
	rows, err := q.db.Query(ctx, findAllGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.CommunityID,
			&i.Owner,
			&i.Region,
			&i.Gamemode,
			&i.Open,
			&i.Passcode,
			&i.Vanguards,
			&i.Duelists,
			&i.Strategists,
			&i.Platforms,
			&i.VoiceChat,
			&i.Mic,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllPlayers = `-- name: FindAllPlayers :many
SELECT id, name, display_name, region, platform, gamemode, roles, rank, characters, p_voice_chat, p_mic, vanguards, duelists, strategists, platforms, g_voice_chat, g_mic, created_at, updated_at FROM Players
`

func (q *Queries) FindAllPlayers(ctx context.Context) ([]Player, error) {
	rows, err := q.db.Query(ctx, findAllPlayers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.DisplayName,
			&i.Region,
			&i.Platform,
			&i.Gamemode,
			&i.Roles,
			&i.Rank,
			&i.Characters,
			&i.PVoiceChat,
			&i.PMic,
			&i.Vanguards,
			&i.Duelists,
			&i.Strategists,
			&i.Platforms,
			&i.GVoiceChat,
			&i.GMic,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupByID = `-- name: GetGroupByID :one
SELECT groups.id, community_id, owner, groups.region, groups.gamemode, open, passcode, groups.vanguards, groups.duelists, groups.strategists, groups.platforms, voice_chat, mic, groups.created_at, groups.updated_at, group_id, player_id, leader, players.id, name, display_name, players.region, platform, players.gamemode, roles, rank, characters, p_voice_chat, p_mic, players.vanguards, players.duelists, players.strategists, players.platforms, g_voice_chat, g_mic, players.created_at, players.updated_at 
FROM Groups
JOIN GroupMembers ON Groups.id = GroupMembers.group_id
JOIN Players ON Players.id = GroupMembers.player_id
WHERE Groups.id = $1
`

type GetGroupByIDRow struct {
	ID            string      `json:"id"`
	CommunityID   int32       `json:"community_id"`
	Owner         string      `json:"owner"`
	Region        Region      `json:"region"`
	Gamemode      Gamemode    `json:"gamemode"`
	Open          bool        `json:"open"`
	Passcode      string      `json:"passcode"`
	Vanguards     pgtype.Int4 `json:"vanguards"`
	Duelists      pgtype.Int4 `json:"duelists"`
	Strategists   pgtype.Int4 `json:"strategists"`
	Platforms     []Platform  `json:"platforms"`
	VoiceChat     pgtype.Bool `json:"voice_chat"`
	Mic           pgtype.Bool `json:"mic"`
	CreatedAt     time.Time   `json:"created_at"`
	UpdatedAt     time.Time   `json:"updated_at"`
	GroupID       string      `json:"group_id"`
	PlayerID      int32       `json:"player_id"`
	Leader        bool        `json:"leader"`
	ID_2          int32       `json:"id_2"`
	Name          string      `json:"name"`
	DisplayName   string      `json:"display_name"`
	Region_2      Region      `json:"region_2"`
	Platform      Platform    `json:"platform"`
	Gamemode_2    Gamemode    `json:"gamemode_2"`
	Roles         []Role      `json:"roles"`
	Rank          Rankid      `json:"rank"`
	Characters    []string    `json:"characters"`
	PVoiceChat    bool        `json:"p_voice_chat"`
	PMic          bool        `json:"p_mic"`
	Vanguards_2   pgtype.Int4 `json:"vanguards_2"`
	Duelists_2    pgtype.Int4 `json:"duelists_2"`
	Strategists_2 pgtype.Int4 `json:"strategists_2"`
	Platforms_2   []Platform  `json:"platforms_2"`
	GVoiceChat    pgtype.Bool `json:"g_voice_chat"`
	GMic          pgtype.Bool `json:"g_mic"`
	CreatedAt_2   time.Time   `json:"created_at_2"`
	UpdatedAt_2   time.Time   `json:"updated_at_2"`
}

func (q *Queries) GetGroupByID(ctx context.Context, id string) (GetGroupByIDRow, error) {
	row := q.db.QueryRow(ctx, getGroupByID, id)
	var i GetGroupByIDRow
	err := row.Scan(
		&i.ID,
		&i.CommunityID,
		&i.Owner,
		&i.Region,
		&i.Gamemode,
		&i.Open,
		&i.Passcode,
		&i.Vanguards,
		&i.Duelists,
		&i.Strategists,
		&i.Platforms,
		&i.VoiceChat,
		&i.Mic,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GroupID,
		&i.PlayerID,
		&i.Leader,
		&i.ID_2,
		&i.Name,
		&i.DisplayName,
		&i.Region_2,
		&i.Platform,
		&i.Gamemode_2,
		&i.Roles,
		&i.Rank,
		&i.Characters,
		&i.PVoiceChat,
		&i.PMic,
		&i.Vanguards_2,
		&i.Duelists_2,
		&i.Strategists_2,
		&i.Platforms_2,
		&i.GVoiceChat,
		&i.GMic,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
	)
	return i, err
}
