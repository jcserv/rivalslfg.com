// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: group.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGroup = `-- name: CreateGroup :one
WITH new_player AS (
    INSERT INTO Players (
        name,
        platform,
        roles,
        rank,
        characters,
        voice_chat,
        mic
    ) VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7
    )
    RETURNING id
),
new_group AS (
    INSERT INTO Groups (
        owner,
        region,
        gamemode,
        open,
        vanguards,
        duelists,
        strategists,
        platforms,
        voice_chat,
        mic
    ) VALUES (
        $1,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        $14,
        $15,
        $16
    )
    RETURNING id
),
group_member AS (
    INSERT INTO GroupMembers (
        group_id,
        player_id,
        leader
    )
    SELECT 
        new_group.id,
        new_player.id,
        true
    FROM new_group, new_player
)
SELECT 
    new_group.id as group_id,
    new_player.id as player_id
FROM new_group, new_player
`

type CreateGroupParams struct {
	OwnerName      string      `json:"owner_name"`
	Platform       string      `json:"platform"`
	Roles          []string    `json:"roles"`
	RankValue      int32       `json:"rank_value"`
	Characters     []string    `json:"characters"`
	VoiceChat      bool        `json:"voice_chat"`
	Mic            bool        `json:"mic"`
	Region         string      `json:"region"`
	Gamemode       string      `json:"gamemode"`
	Open           bool        `json:"open"`
	Vanguards      pgtype.Int4 `json:"vanguards"`
	Duelists       pgtype.Int4 `json:"duelists"`
	Strategists    pgtype.Int4 `json:"strategists"`
	Platforms      []string    `json:"platforms"`
	GroupVoiceChat pgtype.Bool `json:"group_voice_chat"`
	GroupMic       pgtype.Bool `json:"group_mic"`
}

type CreateGroupRow struct {
	GroupID  string `json:"group_id"`
	PlayerID int32  `json:"player_id"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (CreateGroupRow, error) {
	row := q.db.QueryRow(ctx, createGroup,
		arg.OwnerName,
		arg.Platform,
		arg.Roles,
		arg.RankValue,
		arg.Characters,
		arg.VoiceChat,
		arg.Mic,
		arg.Region,
		arg.Gamemode,
		arg.Open,
		arg.Vanguards,
		arg.Duelists,
		arg.Strategists,
		arg.Platforms,
		arg.GroupVoiceChat,
		arg.GroupMic,
	)
	var i CreateGroupRow
	err := row.Scan(&i.GroupID, &i.PlayerID)
	return i, err
}
