// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: group.sql

package repository

import (
	"context"
)

const findGroups = `-- name: FindGroups :many
SELECT 
    g.id,
	community_id,
	owner,
	g.region,
	g.gamemode,
	open,
	jsonb_build_object(
		'vanguards', g.vanguards,
		'duelists', g.duelists,
		'strategists', g.strategists
	) AS role_queue,
	 jsonb_build_object(
		'platforms', g.platforms,
		'voiceChat', g.voice_chat,
		'mic', g.mic
	) AS group_settings,
    players
FROM Groups g
`

type FindGroupsRow struct {
	ID            string `json:"id"`
	CommunityID   int32  `json:"community_id"`
	Owner         string `json:"owner"`
	Region        string `json:"region"`
	Gamemode      string `json:"gamemode"`
	Open          bool   `json:"open"`
	RoleQueue     []byte `json:"role_queue"`
	GroupSettings []byte `json:"group_settings"`
	Players       []byte `json:"players"`
}

func (q *Queries) FindGroups(ctx context.Context) ([]FindGroupsRow, error) {
	rows, err := q.db.Query(ctx, findGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindGroupsRow
	for rows.Next() {
		var i FindGroupsRow
		if err := rows.Scan(
			&i.ID,
			&i.CommunityID,
			&i.Owner,
			&i.Region,
			&i.Gamemode,
			&i.Open,
			&i.RoleQueue,
			&i.GroupSettings,
			&i.Players,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
