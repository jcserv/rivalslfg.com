// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: player.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const upsertPlayer = `-- name: UpsertPlayer :one
WITH id_check AS (
    SELECT id FROM Players WHERE id = $17
)
INSERT INTO Players (
    name,
    display_name,
    region,
    platform,
    gamemode,
    roles,
    rank,
    characters,
    voice_chat,
    mic,
    vanguards,
    duelists,
    strategists,
    platforms,
    g_voice_chat,
    g_mic
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16
)
ON CONFLICT (name) DO UPDATE SET
    display_name = EXCLUDED.display_name,
    region = EXCLUDED.region,
    platform = EXCLUDED.platform,
    gamemode = EXCLUDED.gamemode,
    roles = EXCLUDED.roles,
    rank = EXCLUDED.rank,
    characters = EXCLUDED.characters,
    voice_chat = EXCLUDED.voice_chat,
    mic = EXCLUDED.mic,
    vanguards = EXCLUDED.vanguards,
    duelists = EXCLUDED.duelists,
    strategists = EXCLUDED.strategists,
    platforms = EXCLUDED.platforms,
    g_voice_chat = EXCLUDED.g_voice_chat,
    g_mic = EXCLUDED.g_mic,
    updated_at = NOW()
WHERE 
    (SELECT 1 FROM id_check) IS NULL OR -- no specific id provided
    Players.id = $17 -- match provided id
RETURNING id
`

type UpsertPlayerParams struct {
	Name        string      `json:"name"`
	DisplayName string      `json:"display_name"`
	Region      string      `json:"region"`
	Platform    string      `json:"platform"`
	Gamemode    string      `json:"gamemode"`
	Roles       []string    `json:"roles"`
	Rank        Rankid      `json:"rank"`
	Characters  []string    `json:"characters"`
	VoiceChat   bool        `json:"voice_chat"`
	Mic         bool        `json:"mic"`
	Vanguards   pgtype.Int4 `json:"vanguards"`
	Duelists    pgtype.Int4 `json:"duelists"`
	Strategists pgtype.Int4 `json:"strategists"`
	Platforms   []string    `json:"platforms"`
	GVoiceChat  pgtype.Bool `json:"g_voice_chat"`
	GMic        pgtype.Bool `json:"g_mic"`
	ID          int32       `json:"id"`
}

func (q *Queries) UpsertPlayer(ctx context.Context, arg UpsertPlayerParams) (int32, error) {
	row := q.db.QueryRow(ctx, upsertPlayer,
		arg.Name,
		arg.DisplayName,
		arg.Region,
		arg.Platform,
		arg.Gamemode,
		arg.Roles,
		arg.Rank,
		arg.Characters,
		arg.VoiceChat,
		arg.Mic,
		arg.Vanguards,
		arg.Duelists,
		arg.Strategists,
		arg.Platforms,
		arg.GVoiceChat,
		arg.GMic,
		arg.ID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
