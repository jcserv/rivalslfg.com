// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: player.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO Players (
    name,
    display_name,
    region,
    platform,
    gamemode,
    roles,
    rank,
    characters,
    voice_chat,
    mic,

    vanguards,
    duelists,
    strategists,

    platforms,
    g_voice_chat,
    g_mic
) VALUES (
    $1, -- name
    $2, -- display_name
    $3, -- region
    $4, -- platform
    $5, -- gamemode
    $6, -- roles
    $7, -- rank
    $8, -- characters
    $9, -- voice_chat
    $10, -- mic

    $11, -- vanguards
    $12, -- duelists
    $13, -- strategists

    $14, -- platforms
    $15, -- g_voice_chat
    $16  -- g_mic
) RETURNING id
`

type CreatePlayerParams struct {
	Name        string      `json:"name"`
	DisplayName string      `json:"display_name"`
	Region      string      `json:"region"`
	Platform    string      `json:"platform"`
	Gamemode    string      `json:"gamemode"`
	Roles       []string    `json:"roles"`
	Rank        Rankid      `json:"rank"`
	Characters  []string    `json:"characters"`
	VoiceChat   bool        `json:"voice_chat"`
	Mic         bool        `json:"mic"`
	Vanguards   pgtype.Int4 `json:"vanguards"`
	Duelists    pgtype.Int4 `json:"duelists"`
	Strategists pgtype.Int4 `json:"strategists"`
	Platforms   []string    `json:"platforms"`
	GVoiceChat  pgtype.Bool `json:"g_voice_chat"`
	GMic        pgtype.Bool `json:"g_mic"`
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (int32, error) {
	row := q.db.QueryRow(ctx, createPlayer,
		arg.Name,
		arg.DisplayName,
		arg.Region,
		arg.Platform,
		arg.Gamemode,
		arg.Roles,
		arg.Rank,
		arg.Characters,
		arg.VoiceChat,
		arg.Mic,
		arg.Vanguards,
		arg.Duelists,
		arg.Strategists,
		arg.Platforms,
		arg.GVoiceChat,
		arg.GMic,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
